name: Application Pipeline

on:  
  # push:   
  #   branches:  
  #   - master
  #   - staging   
  #   - dev
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Rebuild entire application?'
        required: true 
        type: boolean 
       

jobs:  
  get_updated_microservices:
    runs-on: ubuntu-latest
    outputs:
      services: ${{ steps.set-affected.outputs.affected_services }} 
      environment: ${{ steps.determine-environment.outputs.environment}} 
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '16.x'

      - name: Install Node.js Dependencies 
        run: |
          git fetch origin master
          npm install

      - name: Get Affected Services
        id: set-affected
        run: |

          if [ ${{ inputs.force_rebuild }} = true ]
          then
            NX_OUTPUT=$(npx nx print-affected --all --plain)
          else
            NX_OUTPUT=$(npx nx print-affected --base="$GITHUB_REF_NAME"~1 --head="$GITHUB_REF_NAME")
          fi

          AFFECTED_SERVICES=$(jq -r '.projects' --compact-output <<< "$NX_OUTPUT" )
          echo "affected_services=$AFFECTED_SERVICES" >> $GITHUB_OUTPUT
          
      - name: Determine Environment
        id: determine-environment
        run: |
            case $GITHUB_REF_NAME in

              master)
                DEPLOY_ENV=prod
                ;;

              dev)
                DEPLOY_ENV=dev
                ;;

              staging)
                DEPLOY_ENV=staging
                ;;
              *)
                ;;
            esac
            echo "environment=$DEPLOY_ENV" >> $GITHUB_OUTPUT

      - name: Check matrix      
        run: |
          echo ${{ steps.set-affected.outputs.affected }} 


  run_unit_tests:
    needs: get_updated_microservices
    runs-on: ubuntu-latest  
    if: ${{ needs.get_updated_microservices.outputs.services != '[]' && needs.get_updated_microservices.outputs.services != '' }}
    strategy:
      matrix: 
        services: ${{ fromJSON(needs.get_updated_microservices.outputs.services) }}
    steps:

    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.8

    - name: Run Tests
      run: |
        cd ./microservices/${{ matrix.services }}
        chmod +x ./run_unit_tests.sh
        ./run_unit_tests.sh


  deploy_microservices:
    needs: [get_updated_microservices, run_unit_tests]
    runs-on: ubuntu-latest
    environment: 
      name: ${{ needs.get_updated_microservices.outputs.environment }}
    if: ${{ needs.get_updated_microservices.outputs.services != '[]' && needs.get_updated_microservices.outputs.services != '' }}
    strategy:
      matrix: 
        services: ${{ fromJSON(needs.get_updated_microservices.outputs.services) }}
    permissions:
      id-token: write
      contents: read
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.9

      - name: Configure AWS Credentials  
        uses: aws-actions/configure-aws-credentials@v1 
        with:
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/github          
          role-session-name: github-pipeline-session
          aws-region: eu-west-2 

      - name: Deploy Service
        run: |
          SERVICE_NAME=${{ matrix.services }}
          ENVIRONMENT_NAME=${{ needs.get_updated_microservices.outputs.environment }}
          cd ./microservices/$SERVICE_NAME/
          chmod +x ./deploy_service.sh
          ./deploy_service.sh $SERVICE_NAME $ENVIRONMENT_NAME
          

  perform_integration_tests:
    needs: [get_updated_microservices, deploy_microservices]
    runs-on: ubuntu-latest  
    if: ${{ needs.get_updated_microservices.outputs.environment == 'prod'}}
    steps:

    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Install Node.js
      uses: actions/setup-node@v1
      with:
        node-version: '16.x'

    - name: Install newman
      run: |
        npm install -g newman
        npm install -g newman-reporter-htmlextra

    - name: Make Directory for Test Results
      run: mkdir -p testArtifacts

    - name: Run Postman Collection  
      run: |
        newman  run ./test/integration/postman.json --suppress-exit-code -r htmlextra --reporter-htmlextra-export testArtifacts/htmlreport.html

    - name: Output the results
      uses: actions/upload-artifact@v2
      with:
        name: Reports
        path: testArtifacts








